Notas 2 

1.- Visualizar las tablas en el servidor. 
	admin.py 
		-> class Django Model admin + enter  

		--> cambiar nombre en 
		register(Tejido, TejidoAdmin)

		list_display = ('color', 'temperatura', 'name') --> estos nombres deben de coincidir con las variables dentro de models 

debemos de agregar modelos y aplicaciones, para despues visualizarlas 

2.- Agregamos un filtro 
	Dentro de admin.py
		-> list_filter = ('color', )

	Para dejar un valor fijo 
		-> readonly_fields = ('color', )

	Ordenas los valores por orden (ya sea mayor o menor)
		-> ordering = ('color') o ('-color')

3.- Dar de alta a las aplicaciones de otra forma 
	settings.py
		INSTALLED_APPS += ['home', 'about', 'sintactico'] #concatenamos las nuevas aplicaciones

4.- Agregamos un modelo paciente
	class Paciente(models.Model):
		name = models.CharField(max_length = 50)

	Migramos, makemifartions, migrate

5.- Admin.py 
	Agregamos clase y 
		class Django Model Admin
		-> class PacienteAdmin(admin.ModelAdmin):
			list_display = ('name',)

	admin.site.register(Paciente, PacienteAdmin)

6.- Para evitar repetir valores, debemos de modificar 
	model.py
	Agregamos una foreign Key, asignandole los valores a name
		-> fk + enter 
		name = models.ForeignKey(Paciente, on_delete=models.CASCADE)

	Como estamos cambiando campos en clase Tejido, nos manda un tipo "menú" en la consola. 
	1) Proveer un valor por default 
	2) Ignorar por ahora 
	3) Salir y agregar valor por default
	Seleccionamos 2

	Como realizamos este cambio y tenemos valores en la base de datos, pos borramos las migraciones en home y las volvemos a hacer D:
	1.- Borramos la base de datos y las migraciones en home
	-> python manage.py migrate
	-> python manage.py makemigrations home
	-> python manage.py migrate

	Creamos de nuevo el super usario ya que lo borramos 

7.- Explicación de los tipos de relaciones 
	models.py
		-> ManyToManyField (campo de relaciones muchos a muchos)
		-> OneToOneField (Campo de relacion uno a uno )

8.- Agregamos en models.py 
	Clase Tejido 
		-> mFloat + enter
		-> inflammation = models.FloatField(verbose_name= 'inflamación')

	admin.py
	agregar en clase tejidoAdmin, agregar inflammation

9.- views.py
	Cambiando la vista usando -> render + enter 
	-> template_name = ""
	return render(request, template_name, {})

	Agregamos una plantilla de html
	-> home - creamos una carpeta "templates" - nueva carpeta dentro de templates "home" - creamos el archivo "index.html"

	-> html:5 + enter
	<title>Reconocimiento de patrones Sintáctico Estructural OwO</title>

	Regresamos a views.py 
	-> template_name = "home/index.html"

	Regresamos a html 
	-> agregamos dentro del body un texto 
		-<h1>Prueba de html D: a ver si sale bien ja ja</h1>

	Dentro de urls.py de home quitamos de:
	path('', home, name = 'home' )

10.- Trabajando ando con about 
	Agregamos una vista 
	-> def + enter 
	def about(request):
		template_name = "about/about.html"
    return render(request, template_name, {})

11.- Agregamos urls.py dentro de about
	-> urlpatterns + enter 
	-> path_inline + enter

12.- Dar de alta en las urls.py principales
	-> path('', include('about.urls')),

13.- Agregamos una plantilla de html dentro de about
	-> about - creamos una carpeta "templates" - nueva carpeta dentro de templates "about" - creamos el archivo "about.html"

14.- Hacemos los mismos pasos de 10, para sintáctico D: 

15.- Agregando imagenes a la página dentro de sintactico.html
	<p>
        <img src="https://picsum.photos/id/237/200/300" alt="">
    </p>

15.- Haciendo un menú dentro de home/index.html 
	<ul>
		<li>
			<a href="{% url 'sintactico' %}">
				sintactico
			</a>
		</li>
	</ul>

	Cuando la app si tiene nombre entonces le decimos que sintactico:sintactico, sintactico pertenece a sintactico

16.- Copiamos en todos los html

17.- El diccionario de contexto (lo que va dentro de las llaves {})
	nombre = consultaDB(request)
	return(request, template_name, {'nombre':nombre}) ## permite mandar información a template, la info puede provenir de una consulta de BD

	Agregamos la petición a about.html para que se pueda visualizar 
		-> <p> {{nombre}} </p>

18.- Se pueden definir listas de valores, esas se le pueden ingresar igual al diccionario de contexto 
	-> clave:valor 

	lista = [1, 2, 3, 4, 5]

	{'miLista':lista}

	E igual tenemos que "visualizarla en el html" de la siguiente manera 

	-> <ul>
        <p>Esta es una prueba de lista</p>
        {% for i in miLista %}
        <li>
            {{i}}
        </li>
      
        {% endfor %}    
    </ul>

19.- Para no repetir código podemos hacer lo siguiente, dentro de index.html
	-> Agregamos un tagblock 
	block + enter 

	{% block contenido %}

      
    {% endblock contenido %}

	-> extends + enter

	{% extends 'home/index.html' %}